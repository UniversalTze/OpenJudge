networks:
  auth:
    name: auth
    driver: bridge

  gateway:
    name: gateway
    driver: bridge

  auth-cache:
    name: auth-cache
    driver: bridge
  
  api:
    name: api
    driver: bridge

  problems:
    name: problems
    driver: bridge

  submission:
    name: submission
    driver: bridge

  execution-submission-queue:
    name: execution-submission-queue
    driver: bridge

services:
  authentication_service:
    build: { 
      context: ../../services/auth, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.authentication 
    }
    container_name: authentication_service
    restart: unless-stopped
    environment:
      USER_DATABASE_URL: "postgres://${USER_DATABASE_USER}:${USER_DATABASE_PASSWORD}@user_database:5432/${USER_DATABASE_NAME}?sslmode=disable"
    env_file:
      - ../../.env
    ports:
      - "${AUTH_SERVICE_PORT}:8080"
    depends_on:
      user_database:
        condition: service_healthy
        restart: true
    networks:
      - auth
      - gateway

  problems_service:
    build: { 
      context: ../../services/problems, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.problems 
    }
    container_name: problems_service
    restart: unless-stopped
    environment:
      SQLALCHEMY_DATABASE_URI: "postgresql+asyncpg://${PROBLEMS_DATABASE_USER}:${PROBLEMS_DATABASE_PASSWORD}@problems_database:5432/${PROBLEMS_DATABASE_NAME}"
    env_file:
      - ../../.env
    ports:
      - "${PROBLEMS_SERVICE_PORT}:6400"
    depends_on:
      problems_database:
        condition: service_healthy
        restart: true
    networks:
      - problems
      - gateway

  submission_service:
    build: { 
      context: ../../services/submission-3.0, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.submission
    }
    container_name: submission_service
    restart: unless-stopped
    environment:
      SUBMISSION_DATABASE_URL: "postgresql+asyncpg://${SUBMISSION_DATABASE_USER}:${SUBMISSION_DATABASE_PASSWORD}@submission_database:5432/${SUBMISSION_DATABASE_NAME}"
      CELERY_BROKER_URL: "redis://execution-submission-queue:6379"
      PROBLEMS_SERVICE_URL: "http://problems_service:6400"
      JAVA_QUEUE_URL: "http://execution-submission-queue:6379"
      PYTHON_QUEUE_URL: "http://execution-submission-queue:6379"
    env_file:
      - ../../.env
    ports:
      - "${SUBMISSION_SERVICE_PORT}:5000"
    depends_on:
      submission_database:
        condition: service_healthy
        restart: true
      execution-submission-queue:
        condition: service_healthy
    networks:
      - submission
      - gateway
      - execution-submission-queue
      - problems

  problems_database:
    image: postgres:15
    container_name: problems_database
    restart: unless-stopped
    ports:
      - "${PROBLEMS_DATABASE_PORT}:5432"
    environment:
      POSTGRES_USER: ${PROBLEMS_DATABASE_USER}
      POSTGRES_PASSWORD: ${PROBLEMS_DATABASE_PASSWORD}
      POSTGRES_DB: ${PROBLEMS_DATABASE_NAME}
    volumes:
      - problems_data:/var/lib/postgresql/data
    networks:
      - problems
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROBLEMS_DATABASE_USER} -d ${PROBLEMS_DATABASE_NAME}"]
      interval: 5s
      retries: 10
      start_period: 60s
      timeout: 20s

  submission_database:
    image: postgres:15
    container_name: submission_database
    restart: unless-stopped
    ports:
      - "${SUBMISSION_DATABASE_PORT}:5432"
    environment:
      POSTGRES_USER: ${SUBMISSION_DATABASE_USER}
      POSTGRES_PASSWORD: ${SUBMISSION_DATABASE_PASSWORD}
      POSTGRES_DB: ${SUBMISSION_DATABASE_NAME}
    volumes:
      - submission_data:/var/lib/postgresql/data
    networks:
      - submission
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SUBMISSION_DATABASE_USER} -d ${SUBMISSION_DATABASE_NAME}"]
      interval: 5s
      retries: 10
      start_period: 60s
      timeout: 20s

  user_database:
    image: postgres:15
    container_name: user_database
    restart: unless-stopped
    ports:
      - "${USER_DATABASE_PORT}:5432"
    environment:
      POSTGRES_USER: ${USER_DATABASE_USER}
      POSTGRES_PASSWORD: ${USER_DATABASE_PASSWORD}
      POSTGRES_DB: ${USER_DATABASE_NAME}
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DATABASE_USER} -d ${USER_DATABASE_NAME}"]
      interval: 5s
      retries: 10
      start_period: 60s
      timeout: 20s

  auth-cache:
    image: redis:7
    container_name: auth-cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - cache_data:/data
    networks:
      - auth-cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  execution-submission-queue:
    image: redis:7
    container_name: execution-submission-queue
    restart: unless-stopped
    ports:
      - "${QUEUE_PORT}:6379"
    volumes:
      - queue_data:/data
    networks:
      - execution-submission-queue
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  subscriber:
    build:
      context: ../../services/subscriber
      dockerfile: ../../infrastructure/docker/Dockerfile.subscriber
    restart: always
    container_name: subscriber
    environment:
      SUBMISSION_DATABASE_URL: "postgresql+asyncpg://${SUBMISSION_DATABASE_USER}:${SUBMISSION_DATABASE_PASSWORD}@submission_database:5432/${SUBMISSION_DATABASE_NAME}"
      CELERY_BROKER_URL: "redis://execution-submission-queue:6379"
    env_file:
      - ../../.env
    depends_on:
      execution-submission-queue:
        condition: service_healthy
      submission_database:
        condition: service_healthy
    networks:
      - execution-submission-queue
      - submission

  python-executor:
    build:
      context: ../../services/execution
      dockerfile: ../../infrastructure/docker/Dockerfile.python
    restart: always
    container_name: python-executor
    environment:
      CELERY_BROKER_URL: "redis://execution-submission-queue:6379"
      TARGET_QUEUE: ${PYTHON_QUEUE_NAME}
      OUTPUT_QUEUE: ${OUTPUT_QUEUE_NAME}
      LANGUAGE: python
    depends_on:
      execution-submission-queue:
        condition: service_healthy
    networks:
      - execution-submission-queue

  java-executor:
    build:
      context: ../../services/execution
      dockerfile: ../../infrastructure/docker/Dockerfile.java
    restart: always
    container_name: java-executor
    environment:
      CELERY_BROKER_URL: "redis://execution-submission-queue:6379"
      TARGET_QUEUE: ${JAVA_QUEUE_NAME}
      OUTPUT_QUEUE: ${OUTPUT_QUEUE_NAME}
      LANGUAGE: java
    depends_on:
      execution-submission-queue:
        condition: service_healthy
    networks:
      - execution-submission-queue

  # execution-test-client:
  #   build:
  #     context: ../../services/execution
  #     dockerfile: ../../infrastructure/docker/execution/Dockerfile.test
  #   restart: always
  #   environment:
  #     CELERY_BROKER_URL: redis://execution-submission-queue:6379
  #   command: bash -c "echo 'Test client container is running. Connect with `docker compose exec test-client bash`'; while true; do sleep 360; done" # Loop indefinitely in main thread
  #   depends_on:
  #     execution-submission-queue:
  #       condition: service_healthy
  #   networks:
  #     - execution-submission-queue

  gateway:
    build: { 
      context: ../../services/gateway, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.gateway 
    }
    container_name: gateway
    restart: unless-stopped
    environment:
      AUTH_SERVICE_URL: "http://authentication_service:8080"
      PROBLEMS_SERVICE_URL: "http://problems_service:6400"
      SUBMISSION_SERVICE_URL: "http://submission_service:5000"
      REDIS_URL: "redis://auth-cache:6379"
    env_file:
      - ../../.env
    ports:
      - "${API_GATEWAY_PORT}:8080"
    depends_on:
      auth-cache:
        condition: service_healthy
    networks:
      - gateway
      - auth-cache
      - api

  frontend:
    build: { 
      context: ../../services/frontend, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.frontend 
    }
    container_name: frontend
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "${FRONTEND_PORT}:8080"
    networks:
      - api

volumes:
  user_data:
  cache_data:
  queue_data:
  problems_data:
  submission_data: