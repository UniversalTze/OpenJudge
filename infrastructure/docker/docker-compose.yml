services:
  authentication_service:
    build: { 
      context: ../../services/auth, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.authentication 
    }
    container_name: authentication_service
    restart: unless-stopped
    environment:
      USER_DATABASE_URL: "postgres://${USER_DATABASE_USER}:${USER_DATABASE_PASSWORD}@user_database:5432/${USER_DATABASE_NAME}?sslmode=disable"
    env_file:
      - ../../.env
    ports:
      - "${AUTH_SERVICE_PORT}:8080"
    depends_on:
      - user_database

  user_database:
    image: postgres:15
    container_name: user_database
    restart: unless-stopped
    ports:
      - "${USER_DATABASE_PORT}:5432"
    environment:
      POSTGRES_USER: ${USER_DATABASE_USER}
      POSTGRES_PASSWORD: ${USER_DATABASE_PASSWORD}
      POSTGRES_DB: ${USER_DATABASE_NAME}
    volumes:
      - user_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
      
  gateway:
    build: { 
      context: ../../services/gateway, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.gateway 
    }
    container_name: gateway
    restart: unless-stopped
    environment:
      - AUTH_SERVICE_URL=http://authentication_service:8080
      - REDIS_URL=redis://redis:6379
    env_file:
      - ../../.env
    ports:
      - "${API_GATEWAY_PORT}:8080"
    depends_on:
      - redis

  frontend:
    build: { 
      context: ../../services/frontend, 
      dockerfile:  ../../infrastructure/docker/Dockerfile.frontend 
    }
    container_name: frontend
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "${FRONTEND_PORT}:8080"

volumes:
  user_data:
  redis_data:
