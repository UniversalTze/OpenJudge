version: '3'

dotenv: ['.env']

tasks:
  # AUTHENTICATION SERVICE COMMANDS
  run:auth:
    desc: Run the authentication service in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge up authentication_service user_database --build -d 
    silent: true

  #test:auth:

  # EXECUTION SERVICE COMMANDS
  run:execution:
    desc: Run the execution service in development mode.
    cmds:
      - docker compose -f infrastructure/docker/docker-compose.yml -p openjudge up execution-submission-queue python-executor java-executor --build -d
    silent: true

  test:execution:
    desc: Run the execution service in development mode, and then runs unit tests against this service.
    cmds:
      - docker compose -f infrastructure/docker/docker-compose.yml -p openjudge up execution-submission-queue python-executor java-executor execution-test-client --build -d
      - docker compose -f infrastructure/docker/docker-compose.yml -p openjudge exec execution-test-client python test_client.py
    silent: true

  down:execution:
    desc: Tear down local docker containers for execution service
    cmds:
      - docker compose -f infrastructure/docker/docker-compose.yml -p openjudge down execution-submission-queue python-executor java-executor execution-test-client
    silent: true

  # FRONTEND COMMANDS
  #run:app:

  #test:app:

  # PROBLEMS SERVICE COMMANDS
  run:problems:
    desc: Run the problems service in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge up problems_service problems_database --build -d
    silent: true

  down:problems:
    desc: Run the problems service in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge down problems_service problems_database
    silent: true


  # test:problems:

  # SUBMISSION SERVICE COMMANDS
  run:submission:
    desc: Run the submission service in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge up submission_database submission_service execution-submission-queue --build -d
    silent: true

  down:submission:
    desc: Tears down submission service containers
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge down submission_database submission_service execution-submission-queue
    silent: true

  # test:submission:

  # API GATEWAY COMMANDS
  run:gateway:
    desc: Run the API Gateway in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge up redis gateway --build -d
    silent: true

  test:gateway:
    desc: Run the API Gateway in development mode, and then runs unit tests against this service.
    cmds:
      - task run:gateway
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge exec gateway python -m pytest tests.py -v
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge down
    silent: true

  # PROJECT COMMANDS
  run: 
    desc: Run the project in development mode.
    cmds:
      - docker-compose -f infrastructure/docker/docker-compose.yml -p openjudge up --build -d
    silent: true
  
  #test:

  deploy:
    desc: Deploy the project.
    cmds:
      - cd infrastructure/terraform && terraform init && terraform apply -auto-approve
    silent: false
    env:
      TF_VAR_AWS_REGION: "{{.AWS_REGION}}"
      TF_VAR_AWS_ACCESS_KEY: "{{.AWS_ACCESS_KEY}}"
      TF_VAR_AWS_SECRET_KEY: "{{.AWS_SECRET_KEY}}"
      TF_VAR_AWS_SESSION_TOKEN: "{{.AWS_SESSION_TOKEN}}"
      TF_VAR_JWT_SECRET: "{{.JWT_SECRET}}"
      TF_VAR_JWT_PUBLIC_KEY: "{{.JWT_PUBLIC_KEY}}"
      TF_VAR_USER_DATABASE_NAME: "{{.USER_DATABASE_NAME}}"
      TF_VAR_USER_DATABASE_USER: "{{.USER_DATABASE_USER}}"
      TF_VAR_USER_DATABASE_PASSWORD: "{{.USER_DATABASE_PASSWORD}}"
      TF_VAR_SMTP_HOST: "{{.SMTP_HOST}}"
      TF_VAR_SMTP_PORT: "{{.SMTP_PORT}}"
      TF_VAR_SMTP_USER: "{{.SMTP_USER}}"
      TF_VAR_SMTP_PASSWORD: "{{.SMTP_PASSWORD}}"
      TF_VAR_SMTP_FROM: "{{.SMTP_FROM}}"

  destroy:
    desc: Destroy the project.
    cmds:
      - cd infrastructure/terraform && terraform destroy -auto-approve
    silent: false
    env:
      TF_VAR_AWS_REGION: "{{.AWS_REGION}}"
      TF_VAR_AWS_ACCESS_KEY: "{{.AWS_ACCESS_KEY}}"
      TF_VAR_AWS_SECRET_KEY: "{{.AWS_SECRET_KEY}}"
      TF_VAR_AWS_SESSION_TOKEN: "{{.AWS_SESSION_TOKEN}}"
      TF_VAR_JWT_SECRET: "{{.JWT_SECRET}}"
      TF_VAR_JWT_PUBLIC_KEY: "{{.JWT_PUBLIC_KEY}}"
      TF_VAR_USER_DATABASE_NAME: "{{.USER_DATABASE_NAME}}"
      TF_VAR_USER_DATABASE_USER: "{{.USER_DATABASE_USER}}"
      TF_VAR_USER_DATABASE_PASSWORD: "{{.USER_DATABASE_PASSWORD}}"
      TF_VAR_SMTP_HOST: "{{.SMTP_HOST}}"
      TF_VAR_SMTP_PORT: "{{.SMTP_PORT}}"
      TF_VAR_SMTP_USER: "{{.SMTP_USER}}"
      TF_VAR_SMTP_PASSWORD: "{{.SMTP_PASSWORD}}"
      TF_VAR_SMTP_FROM: "{{.SMTP_FROM}}"

